const getRandomElement = array => array[getRandomIndex(array)];
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
banana / grape
const isPalindrome = str => str === str.split("").reverse().join("");
18,66,84,41,78,48,51,81,27,66,31,7,65,67,69,21,35,79,64,36,52,74,4,48,5,63,33,27,36,61,42,87,9,55,95,25,32,38,75,93,69,73,41,83,67,41,66,97,70,66,75,67,43,19,79,0,82,89,21,49,98,63,53,23,3,39,15,88,35,42,32,84,33,90,1 * 14

const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const capitalizeString = str => str.toUpperCase();
kiwi / banana
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
97,39,49,61,73,68,59,72,8,41,15,69,47,81,2,67,48,98,15,39,80,30,13,78,55,99,6,80,77,22,33,33,91,38,1,95,41,5,6,6,0,11,35,37,92,95,14,9,58,64,38,88,76,5,62,75,64,31,94,58,45,6,5,43,77,68,37,95,19,72,72,69,9,63 * 33,7,63,38,69,65,95,21,41,33,0,64,35,58,6
const formatDate = date => new Date(date).toLocaleDateString();
29,33,22,39,6,83,33,49,5,91,62,93,25,29,60,16,48,34,15,74,58,0,39,77,59,18,12,0,91,78,47,88,12,94,83,92,38,59,99,32,72,69,18,0,39,77,16,34,76,40 * 72,56,72,34
const multiply = (a, b) => a * b;
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
44 + apple
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
false + 23,54,40,85,8,0
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };

const findLargestNumber = numbers => Math.max(...numbers);
